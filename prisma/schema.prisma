generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  email         String        @unique
  password_hash String
  alerts        Alert[]
  portfolios    Portfolio[]
  transactions  Transaction[]
  settings      UserSettings?
  wallets       Wallet[]
}

model Portfolio {
  id           Int                         @id @default(autoincrement())
  userId       Int
  name         String
  description  String?
  created_at   DateTime                    @default(now())
  updated_at   DateTime                    @default(now())
  user         User                        @relation(fields: [userId], references: [id])
  coins        PortfolioToCryptocurrency[]
  transactions Transaction[]

  @@index([userId])
}

model Cryptocurrency {
  id            Int                         @id @default(autoincrement())
  symbol        String                      @unique
  name          String
  current_price Float?
  market_cap    Float?
  last_updated  DateTime?
  alerts        Alert[]
  portfolios    PortfolioToCryptocurrency[]
  priceHistory  PriceHistory[]
  transactions  Transaction[]

  @@index([symbol])
}

model Wallet {
  id           Int           @id @default(autoincrement())
  userId       Int
  name         String
  address      String        @unique
  type         String
  created_at   DateTime      @default(now())
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Transaction {
  id               Int            @id @default(autoincrement())
  userId           Int
  portfolioId      Int
  cryptoId         Int
  walletId         Int
  type             String
  amount           Float
  price_per_coin   Float?
  total_value      Float?
  fee              Float?
  transaction_date DateTime?
  created_at       DateTime       @default(now())
  cryptocurrency   Cryptocurrency @relation(fields: [cryptoId], references: [id])
  portfolio        Portfolio      @relation(fields: [portfolioId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
  wallet           Wallet         @relation(fields: [walletId], references: [id])

  @@index([userId])
  @@index([portfolioId])
  @@index([cryptoId])
  @@index([walletId])
}

model PriceHistory {
  id             Int            @id @default(autoincrement())
  cryptoId       Int
  price          Float
  volume         Float?
  market_cap     Float?
  timestamp      DateTime
  cryptocurrency Cryptocurrency @relation(fields: [cryptoId], references: [id])

  @@unique([cryptoId, timestamp])
  @@index([cryptoId])
  @@index([timestamp])
}

model Alert {
  id             Int            @id @default(autoincrement())
  userId         Int
  cryptoId       Int
  type           String
  threshold      Float
  is_active      Boolean        @default(true)
  created_at     DateTime       @default(now())
  cryptocurrency Cryptocurrency @relation(fields: [cryptoId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([cryptoId])
}

model UserSettings {
  id                       Int      @id @default(autoincrement())
  userId                   Int      @unique
  currency_preference      String   @default("USD")
  theme_preference         String   @default("light")
  notification_preferences Json?
  updated_at               DateTime @default(now())
  user                     User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PortfolioToCryptocurrency {
  portfolioId      Int
  cryptocurrencyId Int
  cryptocurrency   Cryptocurrency @relation(fields: [cryptocurrencyId], references: [id])
  portfolio        Portfolio      @relation(fields: [portfolioId], references: [id])

  @@id([portfolioId, cryptocurrencyId])
  @@index([portfolioId])
  @@index([cryptocurrencyId])
}
